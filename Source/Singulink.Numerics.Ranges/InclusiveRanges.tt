<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated/>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

#nullable enable

namespace Singulink.Numerics;

<#
    (string name, string type, string countType)[] ranges = new[]
    {
        ("InclusiveRange8", "byte", "int"),
        ("InclusiveRange16", "short", "int"),
        ("InclusiveRange32", "int", "long"),
        ("InclusiveSRange8", "sbyte", "int"),
        ("InclusiveURange16", "ushort", "int"),
        ("InclusiveURange32", "uint", "long"),
    };

    foreach ((string name, string type, string countType) in ranges) {
#>
/// <summary>
/// Represents a range of <see cref="<#= type #>"/> values with an inclusive start and end.
/// </summary>
[DebuggerDisplay("[{Start}..{End}], Count: {Count}")]
public readonly struct <#= name #> : IInclusiveRange<<#= type #>>, IEquatable<<#= name #>>, IAnyRange
{
    private static EmptyRangeEqualityComparer<<#= name #>>? _emptyEqualityComparer;

    private readonly <#= type #> _start;
    private readonly <#= type #> _end;

    /// <summary>
    /// Creates a new instance of the <#= name #> structure with the specified start and inclusive end value.
    /// </summary>
    /// <remarks>
    /// If the start value is greater than the end value then an empty range is created.
    /// </remarks>
    public <#= name #>(<#= type #> start, <#= type #> end)
    {
        _start = start;
        _end = end;
    }

    /// <summary>
    /// Creates a new instance of the <#= name #> structure with a single value in the range.
    /// </summary>
    public static <#= name #> SingleValue(<#= type #> value)
    {
        return new <#= name #>(value, value);
    }

    /// <summary>
    /// Determines whether two ranges are equal. Empty ranges are considered equal to each other, even if they have different start/end values.
    /// </summary>
    public static bool operator ==(<#= name #> x, <#= name #> y) => x.Equals(y);

    /// <summary>
    /// Determines whether two ranges are not equal. Empty ranges are considered equal to each other, even if they have different start/end values.
    /// </summary>
    public static bool operator !=(<#= name #> x, <#= name #> y) => !x.Equals(y);

    /// <summary>
    /// Gets an empty range with a <see cref="Start"/> value of <see cref="<#= type #>.MaxValue"/> and an <see cref="End"/> value of <c>0</c>.
    /// </summary>
    public static <#= name #> Empty => new <#= name #>(<#= type #>.MaxValue, 0);

    /// <summary>
    /// Gets an equality comparer that treats empty ranges as equal, regardless of what their start and end values are.
    /// </summary>
    public static EqualityComparer<<#= name #>> EmptyEqualityComparer => _emptyEqualityComparer ??= new();

    /// <summary>
    /// Gets the start of the range.
    /// </summary>
    public <#= type #> Start => _start;

    /// <summary>
    /// Gets the end of the range.
    /// </summary>
    public <#= type #> End => _end;

    /// <summary>
    /// Gets the number of values in the range.
    /// </summary>
    public <#= countType #> Count => IsEmpty ? 0 : (<#= countType #>)_end - (<#= countType #>)_start + 1;

    /// <summary>
    /// Gets a value indicating whether the range is empty.
    /// </summary>
    public bool IsEmpty => _start > _end;

    /// <summary>
    /// Gets a new range with the specified start value and the same end value as this range.
    /// </summary>
    public <#= name #> StartAt(<#= type #> start) => new(start, _end);

    /// <summary>
    /// Gets a new range with same start value as this range and the specified inclusive end value.
    /// </summary>
    public <#= name #> EndAt(<#= type #> end) => new(_start, end);

    /// <summary>
    /// Expands this range to include the given value. If this range is empty then a single value range containing the given value will be returned.
    /// </summary>
    public <#= name #> ExpandToInclude(<#= type #> value)
    {
        if (IsEmpty)
            return SingleValue(value);

        if (value > _end)
            return EndAt(value);

        if (value < _start)
            return StartAt(value);

        return this;
    }

    /// <summary>
    /// Intersects this range with the given range and returns a resulting range that contains only the values present in both ranges.
    /// </summary>
    /// <remarks>
    /// The resulting range will start at the greater <see cref="Start"/> value of ranges and end at the lesser <see cref="End"/> value of the ranges.
    /// </remarks>
    public <#= name #> IntersectWith(<#= name #> range) => new <#= name #>(Math.Max(_start, range._start), Math.Min(_end, range._end));

    /// <summary>
    /// Combines this range with the given range to produce a resulting range that contains all the values from both ranges. Throws
    /// <see cref="ArgumentException"/> if there is a gap between non-empty ranges. If both ranges are empty then the result is <see cref="Empty"/>.
    /// </summary>
    public <#= name #> UnionWith(<#= name #> range)
    {
        <#= name #> result;

        if (!TryUnionWith(range, out result))
            Throw.Range_UnionInvalid();

        return result;
    }

    /// <summary>
    /// Tries to combine this range with the given range to produce a resulting range that contains all the values from both ranges. Returns false if there
    /// is a gap between non-empty ranges. If both ranges are empty then the result is <see cref="Empty"/>.
    /// </summary>
    public bool TryUnionWith(<#= name #> range, out <#= name #> result)
    {
        if (IsEmpty)
        {
            result = range.IsEmpty ? Empty : range;
            return true;
        }

        if (range.IsEmpty)
        {
            result = this;
            return true;
        }

        result = default;

        if (_start <= range._start)
            return NonEmptyTryUnion(this, range, ref result);

        return NonEmptyTryUnion(range, this, ref result);
    }

    /// <summary>
    /// Coalesces a collection of ranges into a minimal set of combined ranges that contain all the values in the input ranges.
    /// </summary>
    /// <param name="ranges">The ranges to sort and attempt to combine.</param>
    /// <returns>The sorted list of combined ranges.</returns>
    /// <remarks>
    /// If the input ranges are known to be ordered by ascending <see cref="Start"/> order then consider using the <see cref="CoalesceOrdered" /> method for
    /// better performance.
    /// </remarks>
    public static IEnumerable<<#= name #>> Coalesce(IEnumerable<<#= name #>> ranges) => CoalesceOrdered(ranges.OrderBy(r => r.Start));

    /// <summary>
    /// Coalesces a collection ranges ordered by ascending <see cref="Start"/> order into a minimal set of combined ranges that contain all the values in
    /// the input ranges. The output will be incorrect if the ranges are not ordered.
    /// </summary>
    /// <param name="ranges">Ranges ordered by ascending <see cref="Start"/> order to attempt to combine.</param>
    /// <returns>The list of combined ranges.</returns>
    public static IEnumerable<<#= name #>> CoalesceOrdered(IEnumerable<<#= name #>> ranges)
    {
        var enumerator = ranges.GetEnumerator();

        <#= name #> previous;
        <#= name #> next;

        if (!TryGetNextNonEmpty(enumerator, out previous))
            yield break;

        while (TryGetNextNonEmpty(enumerator, out next))
        {
            if (!NonEmptyTryUnion(previous, next, ref previous))
            {
                yield return previous;
                previous = next;
            }
        }

        yield return previous;
    }

    private static bool NonEmptyTryUnion(<#= name #> previous, <#= name #> next, ref <#= name #> result)
    {
        if (next._start == <#= type #>.MinValue || next._start - 1 <= previous._end)
        {
            result = new <#= name #>(previous._start, Math.Max(next._end, previous._end));
            return true;
        }

        return false;
    }

    private static bool TryGetNextNonEmpty(IEnumerator<<#= name #>> enumerator, out <#= name #> result)
    {
        <#= name #> current;

        while (enumerator.MoveNext())
        {
            current = enumerator.Current;

            if (!current.IsEmpty)
            {
                result = current;
                return true;
            }
        }

        result = default;
        return false;
    }

    #region Base Object Method Implementations

    /// <summary>
    /// Determines if this range is equal to the specified range. Empty ranges are only considered equal if their start and end values match.
    /// </summary>
    /// <remarks>
    ///
    /// </remarks>
    public bool Equals(<#= name #> other) => _start == other._start && _end == other._end;

    /// <summary>
    /// Determines if this range is equal to the given object.
    /// </summary>
    public override bool Equals(object? obj) => obj is <#= name #> range && Equals(range);

    /// <summary>
    /// Gets the hash code for this range.
    /// </summary>
    public override int GetHashCode() => HashCode.Combine(_start, _end);

    /// <summary>
    /// Returns a string representation of the range.
    /// </summary>
    public override string ToString() => $"{_start}..{_end}";

    #endregion

    #region IEnumerable

    /// <summary>
    /// Gets an enumerator for this range.
    /// </summary>
    public Enumerator GetEnumerator() => new Enumerator(_start, _end);

    IEnumerator<<#= type #>> IEnumerable<<#= type #>>.GetEnumerator() => GetEnumerator();

    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

    /// <summary>
    /// Supports iteration over a range.
    /// </summary>
    public struct Enumerator : IEnumerator<<#= type #>>
    {
        private readonly <#= type #> _end;
        private <#= type #> _current;
        private <#= type #> _next;

        internal Enumerator(<#= type #> start, <#= type #> end)
        {
            _current = default;
            _next = start;
            _end = end;
        }

        /// <summary>
        /// Disposes the enumerator.
        /// </summary>
        public void Dispose() { }

        /// <summary>
        /// Advances the enumerator to the next value of the range.
        /// </summary>
        public bool MoveNext()
        {
            if (_next <= _end && _current != <#= type #>.MaxValue)
            {
                _current = _next;
                _next++;
                return true;
            }

            return false;
        }

        /// <summary>
        /// Gets the value in the range at the current position of the enumerator.
        /// </summary>
        public <#= type #> Current => _current;

        void IEnumerator.Reset() => throw new NotSupportedException();

        object IEnumerator.Current => _current;
    }

    #endregion
}

<# } #>